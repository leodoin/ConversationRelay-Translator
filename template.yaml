AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Single stack to build a Restaurant Ordering Voice AI application leveraging Twilio ConversationRelay and AWS Bedrock.

Globals:
  Function:
    Timeout: 5
    Runtime: nodejs20.x
    Layers:
      - !Sub "arn:aws:lambda:eu-north-1:580247275435:layer:LambdaInsightsExtension-Arm64:20"
      # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Getting-Started-SAM-CLI.html
Resources:
  ########################################
  # DynamoDB used to save state for each
  # ConversationRelay Session, to save
  # profile data based on phone number, 
  # and to save original and translated
  # text in each conversation.
  ########################################
  PrimaryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TimeToLiveSpecification:
        AttributeName: expireAt
        Enabled: true
      TableName: !Sub "${AWS::StackName}-AppDatabase"
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        -
          AttributeName: "sk"
          AttributeType: "S"
        -
          AttributeName: "pk1"
          AttributeType: "S"
        -
          AttributeName: "sk1"
          AttributeType: "S"
        -
          AttributeName: "pk2"
          AttributeType: "S"
        -
          AttributeName: "sk2"
          AttributeType: "S"          
      KeySchema:
        -
          AttributeName: "pk"
          KeyType: "HASH"
        -
          AttributeName: "sk"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "index-1-full"
          KeySchema:
            -
              AttributeName: "pk1"
              KeyType: "HASH"
            -
              AttributeName: "sk1"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        -
          IndexName: "index-2-full"
          KeySchema:
            -
              AttributeName: "pk2"
              KeyType: "HASH"
            -
              AttributeName: "sk2"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  ########################################
  # Lambda Layer available to all lambdas
  # This layer makes it easy to build
  # update expressions.
  ########################################
  ConversationRelayDynamoDBUtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-ConversationRelayDynamoDBUtilLayer"
      Description: Helper functions for DynamoDB
      ContentUri: layers/layer-cr-dynamodb-util/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  ########################################
  # Lambda Layer available to all lambdas
  # This layer handles posting Websocket
  # messages back to API Gateway.
  ########################################
  ConversationRelayReplyToWSLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-ConversationRelayReplyToWSLayer"
      Description: Function to post Websocket messages back to API Gateway
      ContentUri: layers/layer-cr-reply-to-ws/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  ########################################
  # Lambda Layer available to all lambdas
  # This layer invokes AWS Translate.
  ########################################
  ConversationRelayInvokeTranslateLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-ConversationRelayInvokeTranslateLayer"
      Description: Standardizes calls to AWS Translate
      ContentUri: layers/layer-cr-translate/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain


  ##########################################################################
  #  ConversationRelayTwilioClientLayer
  #
  #  Makes the Twilio SDK available to any lambda.
  ##########################################################################
  ConversationRelayTwilioClientLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-ConversationRelayTwilioClientLayer"
      Description: Allows for calls to Twilio using SDK
      ContentUri: layers/layer-cr-twilio-client/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain  

  ##########################################################################
  #  SNS Topic to initiate OutboundCall
  #
  #  Used to trigger an outbound call to connect caller to callee.
  ##########################################################################
  TwilioInitiateCallTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-TwilioInitiateCallTopic'

  ##########################################################################
  #  (TwilioInitiateCallFunction) Lambda Function     
  #
  # This lambda receives events from SNS to initial a call to the 
  # other party in the translate session. Generates TwiML and then
  # uses Twilio SDK to make an outbound phone call.                       
  ##########################################################################
  TwilioInitiateCallFunction:    
    Type: AWS::Serverless::Function
    Properties:      
      FunctionName: !Sub '${AWS::StackName}-TwilioInitiateCallFunction'
      Description: Makes a call to connect caller to callee
      CodeUri: lambdas/twiml/outbound/initiate-call/
      AutoPublishAlias: live
      Handler: app.lambdaHandler
      Runtime: nodejs20.x      
      Architectures:
        - arm64   
      Timeout: 15
      MemorySize: 128
      Layers: 
        - !Ref ConversationRelayTwilioClientLayer
        - !Ref ConversationRelayInvokeTranslateLayer        
      Environment:
        Variables:          
          TABLE_NAME: !Ref PrimaryDynamoDBTable          
          WS_URL: !Join [ '', [ 'wss://', !Ref CRWebSocketApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
          TRANSLATION_PROVIDER: "aws"
          TRANSLATION_PROVIDER_PARAM: "/translation/PROVIDER"
          DEEPL_API_KEY_PARAM: "/translation/DEEPL_API_KEY"
          AGENT_PHONE_NUMBER_PARAM: "/twilio/AGENT_PHONE_NUMBER"
          TWILIO_FROM_PARAM: "/twilio/TWILIO_DEFAULT_FROM"
          TWILIO_SID_PARAM: "/twilio/TWILIO_ACCOUNT_SID"
          TWILIO_TOKEN_PARAM: "/twilio/TWILIO_AUTH_TOKEN"
      Policies:        
        - DynamoDBCrudPolicy:
            TableName: !Ref PrimaryDynamoDBTable
        - Statement:
          - Effect: Allow
            Action: translate:TranslateText
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/translation/*"
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CR_AWS_BEDROCK*"
      Events:
        SNSEvent:
          Type: SNS
          Properties:            
            Topic: !Ref TwilioInitiateCallTopic

# Websocket API -- Connects to Twilio ConversationRelay
  CRWebSocketApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub "${AWS::StackName}-CRWebSocketApi"
      Description: Websocket API between Twilio and AI application
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

# OnConnectLambda
  OnConnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-onconnect-function'
      Description: Lambda to handle connection to websocket api
      CodeUri: lambdas/websocket/onconnect/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64      
      MemorySize: 128
      Environment:
        Variables:          
          TABLE_NAME: !Ref PrimaryDynamoDBTable 
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref PrimaryDynamoDBTable 

  # Function permissions grant an AWS service or another account permission to use a function
  OnConnectFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref OnConnectLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CRWebSocketApi}/*'
  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref CRWebSocketApi
      Description: OnConnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectLambdaFunction.Arn}/invocations
  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref CRWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: OnConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnConnectIntegration

# Default Lambda -- Handles messages from Twilio ConversationRelay
  DefaultWSLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-default-function' 
      Description: Lambda to handle messages coming into websocket api
      CodeUri: lambdas/websocket/default/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64     
      MemorySize: 1024  
      Timeout: 30
      Layers: 
        - !Ref ConversationRelayDynamoDBUtilLayer
        - !Ref ConversationRelayInvokeTranslateLayer
        - !Ref ConversationRelayReplyToWSLayer
      Environment:
        Variables:          
          TABLE_NAME: !Ref PrimaryDynamoDBTable
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          TWILIO_INITIATE_CALL_TOPIC: !Ref TwilioInitiateCallTopic
          TWILIO_ACCOUNT_SID: "defaultTwilioSid"
          TWILIO_AUTH_TOKEN: "defaultTwilioToken"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PrimaryDynamoDBTable
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CRWebSocketApi}/*'
          - Effect: Allow
            Action: translate:TranslateText
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/translation/*"
          - Effect: Allow
            Action:
            - 'sns:Publish'
            Resource:
            - !Ref TwilioInitiateCallTopic
        
  # Function permissions grant an AWS service or another account permission to use a function
  DefaultWSFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref DefaultWSLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CRWebSocketApi}/*'
  DefaultWSIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref CRWebSocketApi
      Description: Default WS Route Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultWSLambdaFunction.Arn}/invocations
  DefaultWSRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref CRWebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DefaultWSIntegration

  OnDisconnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ondisconnect-function'
      Description: Lambda to handle closed websocket connection
      CodeUri: lambdas/websocket/disconnect/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64     
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:          
          TABLE_NAME: !Ref PrimaryDynamoDBTable
          TWILIO_ACCOUNT_SID: "defaultTwilioSid"
          TWILIO_AUTH_TOKEN: "defaultTwilioToken"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PrimaryDynamoDBTable
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CRWebSocketApi}/*'
          - Effect: Allow
            Action: translate:TranslateText
            Resource: '*'          
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/translation/*"
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CR_AWS_BEDROCK*"
      Layers: 
        - !Ref ConversationRelayDynamoDBUtilLayer
        - !Ref ConversationRelayInvokeTranslateLayer
        - !Ref ConversationRelayReplyToWSLayer      
        - !Ref ConversationRelayTwilioClientLayer        

  OnDisconnectFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref OnDisconnectLambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CRWebSocketApi}/*'
  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref CRWebSocketApi
      Description: OnDisconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectLambdaFunction.Arn}/invocations
  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref CRWebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: OnDisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnDisconnectIntegration
        
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - OnConnectRoute
      - DefaultWSRoute
      - OnDisconnectRoute
    Properties:
      ApiId: !Ref CRWebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref CRWebSocketApi

  WSManageConnectionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:       
      ManagedPolicyName:        
        !Sub '${AWS::StackName}-WSManageConnectionsPolicy'          
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CRWebSocketApi}/*'

  ######################################################
  # TwimlAPI => 
  # Handles inbound call from Twilio and established
  # ConversationRelay session.
  ######################################################
  TwimlAPI:
    Type: AWS::Serverless::HttpApi
    Properties:    
      Name: !Sub "${AWS::StackName}-TwimlAPI"    
      Description: Rest API used to handle inbound requests from Twilio.
      CorsConfiguration:
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"

  ######################################################
  # CallSetupFunction => 
  #
  # Twilio Voice Handler calls this function upon
  # receiving a call that needs a translation session.
  ######################################################
  CallSetupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-CallSetupFunction"
      Description: "Handles inbound call, sets up ConversationRelay Websocket."
      CodeUri: lambdas/twiml/inbound/call-setup-post/
      AutoPublishAlias: live
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Layers: 
        - !Ref ConversationRelayInvokeTranslateLayer      
      Environment:
        Variables:
          WS_URL: !Join [ '', [ 'wss://', !Ref CRWebSocketApi, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
          TABLE_NAME: !Ref PrimaryDynamoDBTable
          TWILIO_ACCOUNT_SID: "defaultTwilioSid"
          TWILIO_AUTH_TOKEN: "defaultTwilioToken"
      Policies:        
        - DynamoDBCrudPolicy:
            TableName: !Ref PrimaryDynamoDBTable
        - Statement:
          - Effect: Allow
            Action: translate:TranslateText
            Resource: '*'            
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: 
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/translation/*"
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CR_AWS_BEDROCK*"
      Events:
        CallSetupPostEvent:
          Type: HttpApi
          Properties:
            Path: /initiate-translation-session
            Method: post
            ApiId: !Ref TwimlAPI

  LanguageSelectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-LanguageSelectorFunction"
      Description: "Handles language selection for translation sessions"
      CodeUri: lambdas/twiml/inbound/language-selector/
      AutoPublishAlias: live
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Environment:
        Variables:
          TABLE_NAME: !Ref PrimaryDynamoDBTable
      Policies:        
        - DynamoDBCrudPolicy:
            TableName: !Ref PrimaryDynamoDBTable
      Events:
        LanguageSelectorEvent:
          Type: HttpApi
          Properties:
            Path: /language-selector
            Method: post
            ApiId: !Ref TwimlAPI
            
##########################################################################
#   Outputs
##########################################################################
Outputs:
  TwimlAPI:
    Description: "URL to use to configure Voice Handler for Twilio Phone Number inbound calls (returns TwiML!)"
    Value: !Sub "https://${TwimlAPI}.execute-api.${AWS::Region}.amazonaws.com/language-selector"
  DynamonDBTableName:
    Value: !Ref PrimaryDynamoDBTable
    Export:
      Name: 'CRTranslateAppPrimaryDynamoTableName'
  DynamonDBArn:
    Value: !GetAtt 
      - PrimaryDynamoDBTable
      - Arn
    Export:
      Name: 'CRTranslateAppPrimaryDynamoTableArn'